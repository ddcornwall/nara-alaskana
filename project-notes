The purpose of this file is to keep track of things that I think will come in handy when I start the actual code.

2/6/18 - https://catalog.archives.gov/api/v1/?naIds=41027109, this is a record linked to 386 items but has not "objects" section in it's JSON. It DOES have a field JSON.opaResponse.results.result[0].description.fileUnit.itemCount that has a number equal to the items in the catalog. So we can test for the field being greater than zero. The field appears to be zero in records with an "objects" component.


2/5/2018 - Use the "c drive" version of index.html to more carefully scrutinize differences between item and file unit display.
Some file units link to a search that picks up items. Question - Do I really need to retreive fileUnits at all? Or in other words, are there any digital objects without item level description? Intuitively, yes.

2/2/2018
Implemented items + file units. Finding that file unit results may not be displaying thumbnails any more.
Need to recheck routines for display. Also search on fairbanks now seems to time out.

2/1/2018

Realized that I need to bring in item level descriptions if I want Alaska Earthquake photographs. See example at https://catalog.archives.gov/api/v1/?naIds=25341615. This will require some item-specific tests and lines in results list. Simply pulling in items will likely cause display to break.

1/27/2018

Problem: ["@extendedText"] from objects.object.file appears to slow retrievals to crawls. But, after experimentation, objects.object.file appears to be required to make objects.object.thumbnail["@URL"] to display properly.

Attempted to retrive ["@path"] from objects.object.file to see if it alone could force thumbnail display, but API rejects anything in the resultFields= that contains ["@anything"].

Possible alternative method would be retrieve objects.object.thumbnail alone, which contains a partial path an the name of the thumbnail. Then reconstruct the missing bits using things retrieved from fileUnit or description.

Thumbnail URL to analyze:
https://catalog.archives.gov/catalogmedia/live/seattle/rg-181/3054053/jpgs/3054053-001-012-0001.jpg/opa-renditions/thumbnails/3054053-001-012-0001.jpg-thumb.jpg


https://catalog.archives.gov/catalogmedia/live/ - base URL
seattle/ - description.fileUnit.physicalOccurrenceArray.fileUnitPhysicalOccurrence.referenceUnitArray.referenceUnit.city
rg-181/
3054053/ - description.fileUnit.parentSeries.naId
jpgs/
3054053-001-012-0001.jpg/ - This part only appears within objects.object.file
opa-renditions/thumbnails/3054053-001-012-0001.jpg-thumb.jpg

BECAUSE ONE NEEDED ITEM IS IN objects.object.file, this approach will not work.



1/20/2018 - To find the latest NARA records mentioning Alaska, use:
https://catalog.archives.gov/api/v1/?q=alaska&sort=description.recordHistory.created.dateTime%20desc
As of 1/20/2018, the latest record alaskana records of any kind were from 12/12/2017.

1/20/2018 - Example of JSON record with multiple objects - Deck Log Book Alaska August 1943:
https://catalog.archives.gov/api/v1/?naIds=72054791

12/27/2017 discovered https://catalog.archives.gov/interactivedocumentation had a full list of searching/sorting fields.


--


Notes from NARA Catalog API search/export at https://github.com/usnationalarchives/Catalog-API/blob/master/search_and_export.md

Sorting results
The results set can be sorted by a given field by using the sort= parameter in combination with the field name and either asc or desc, separated by a space. For example, sort=naId asc (or, with URL encoding sort=naId%20asc). So, sorting the query for the keyword "navy" by NAIDs from lowest to highest is:

[https://catalog.archives.gov/api/v1/?q=navy&sort=naId asc](https://catalog.archives.gov/api/v1/?q=navy&sort=naId asc)
Fields are coded as either string, integer, or datetime, so that they should sort according to the correct logic.

Known issue:

Sort is not yet working across all fields. The API is currently coded so that if a field is not sortable, attempting to sort by it will return an error (rather than silently ignoring the parameter).
---
---

Examination of individual record's JSON fields

Individual record to check fields available through JSON
https://catalog.archives.gov/api/v1/?naIds=25341595

Possible sorting hooks
JSON.opaResponse.results.result[0].description.item.recordHistory.created.dateTime
JSON.opaResponse.results.result[0].description.item.recordHistory.imported.dateTime

Possible search hooks
JSON.opaResponse.results.result[0].description.item.variantControlNumberArray.variantControlNumber.number - "Alaska Digitization Project"

Possible way to limit by year:
JSON.opaResponse.results.result[0].description.item.parentFileUnit.parentSeries.inclusiveDates.inclusiveEndDate.year
JSON.opaResponse.results.result[0].description.item.parentFileUnit.parentSeries.inclusiveDates.inclusiveStartDate.year

Pagination
To start with, we'll look at how to paginate the results set. Use the rows= parameter to set the number of results that will display in the response. Use offset= to specify where in the results set to return your results from.

https://catalog.archives.gov/api/v1/?rows=5&offset=9
Both parameters are optional; when omitted, rows defaults to 10 and offset defaults to 0 (i.e., starting from the beginning). Note that the results count from 1 (there is no 0), so you would use &offset=1 to get the second result. So, our sample query above will return results 10â€“14. The num field in the response tells you the number of each result in the set (it can be omitted or included from responses like other metadata fields below).


---
